<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">


<mapper namespace="sillenceSoft.schedulleCall.Repository.ScheduleRepository">
    <resultMap id="ScheduleResponseDto" type="sillenceSoft.schedulleCall.Dto.ScheduleResponseDto" >
        <result property="scheduleNo" column="scheduleNo"/>
        <result property="statusNo" column="statusNo"/>
        <result property="status" column="status"/>
        <result property="week" column="week"/>
        <result property="modDt" column="modDt"/>
        <association property="startTime" javaType="sillenceSoft.schedulleCall.Dto.StartTime">
            <result property="hour" column="startHour" />
            <result property="minute" column="startMinute" />
        </association>
        <association property="endTime" javaType="sillenceSoft.schedulleCall.Dto.EndTime">
            <result property="hour" column="endHour" />
            <result property="minute" column="endMinute" />
        </association>
    </resultMap>


    <insert id="addSchedule" useGeneratedKeys="true" keyProperty="schedule.scheduleNo">
        insert into Schedule(userNo, modDt, week,  startHour, startMinute, endHour, endMinute, statusNo)
        values (${userNo}, #{schedule.modDt}, ${schedule.week},  ${schedule.startTime.hour},
        ${schedule.startTime.minute}, ${schedule.endTime.hour}, ${schedule.endTime.minute}, ${schedule.statusNo});
    </insert>

    <delete id="deleteSchedule">
        delete from Schedule where scheduleNo =  ${scheduleNo}
    </delete>

    <select id="getSchedule" resultMap="ScheduleResponseDto">
        select a.scheduleNo, b.status, b.statusNo, a.week, a.modDt, a.startHour, a.startMinute, a.endHour, a.endMinute
        from Schedule as a
        join Status as b
        on a.statusNo = b.statusNo
        where a.userNo = ${userNo};
    </select>

    <select id="getScheduleStatusNo" resultType="Long">
        <![CDATA[
            select statusNo
            from Schedule as a
            where a.week=${week} and a.userNo=${userNo} and
            ((${hour} >a.startHour) or (${hour} = a.startHour and ${minute}> a.startMinute)) and
            ((${hour} < a.endHour) or (${hour} = a.endHour and ${minute} <a.endMinute));
        ]]>
    </select>

    <select id="getStatusNo" resultType="Long">
        select statusNo from Schedule where scheduleNo = ${scheduleNo};
    </select>

    <update id="updateSchedule">
        update Schedule set week = ${schedule.week}, startHour = ${schedule.startTime.hour}, startMinute = ${schedule.startTime.minute},
        endHour = ${schedule.endTime.hour}, endMinute = ${schedule.endTime.minute}, modDt =#{schedule.modDt}
        where scheduleNo = ${schedule.scheduleNo};
    </update>

    <select id="getScheduleDto" resultMap="ScheduleResponseDto">
        select * from Schedule where scheduleNo = ${scheduleNo};
    </select>
</mapper>